const mongoose = require('mongoose');
const JobSchemaModel = require('../model/job-schema');
const { StatusCodes } = require('http-status-codes');

var objectId = mongoose.Types.ObjectId; //checks if a given id is a valid mongoose id

const getAllJobs = async(req, res) => {
    try {
        // Get all jobs created by a particular "req.user" from the authenticationToken() middleware in the
        // "token-auth.js" file and sort it by the "createdAt" field generated by the 'timestamps'.
        const results = await JobSchemaModel.find({ creator: req.user.name }).sort('createdAt');
        if (!results) {
            res.status(StatusCodes.NOT_FOUND).send("No jobs created by user.")
        }
        res.status(StatusCodes.OK).json({
            message: "All jobs retrieved successfully.",
            results,
            job_count: results.length
        });
    } catch (err) {
        res.status(StatusCodes.INTERNAL_SERVER_ERROR).send("Error retrieving jobs. " + err);
        console.log(err);
    }
}

const getJob = async(req, res) => {
    // nexted destructuring of "req.user" to get the "userId" from the authenticationToken() middleware and 
    // "req.params" to get the "id" which is given an alias of (rename to) "jobId". Each property (userId 
    // and id) is enclosed in curly braces {} to differentiate it from an alias.
    const { user: { userId }, params: { id: jobId } } = req;

    if (!objectId.isValid(jobId)) { // if jobId is not a valid mongoose id, status code 204
        res.status(StatusCodes.NO_CONTENT).send(`No record with given id: ${jobId}`);
    }
    try {
        const result = await JobSchemaModel.findOne({ _id: jobId, createdBy: userId });
        if (!result) {
            res.status(StatusCodes.NOT_FOUND).send("Job not found.");
        }
        res.status(StatusCodes.OK).json({
            message: "Job retrieved successfully.",
            result
        });
    } catch (err) {
        res.status(StatusCodes.INTERNAL_SERVER_ERROR).send("Error retriving job. " + err);
        console.log(err);
    }
}

const createJob = async(req, res) => {
    try { // add new properties "createdBy" and "creator" to the 'req.body' object
        req.body.createdBy = req.user.userId; // points to the 'req.user' from the authenticationToken() middleware
        req.body.creator = req.user.name
        const result = await JobSchemaModel.create(req.body);
        if (!result) {
            res.status(StatusCodes.BAD_GATEWAY).send("Job creation not successful."); // status code 502
        }
        res.status(StatusCodes.CREATED).json({ // status code 201
            message: "Job created successfully.",
            result
        });
    } catch (err) {
        res.status(StatusCodes.INTERNAL_SERVER_ERROR).send("Error creating job. " + err);
        console.log(err);
    }
}

const updateJob = async(req, res) => {
    // nexted destructuring of "req.user" to get the "userId" from the authenticationToken() middleware and 
    // "req.params" to get the "id" which is given an alias of (rename to) "jobId" and "req.body" to get 
    // "company" and "position"
    const { user: { userId }, params: { id: jobId }, body: { company, position } } = req;

    if (!objectId.isValid(jobId)) { // if jobId is not a valid mongoose id, status code 204
        res.status(StatusCodes.NO_CONTENT).send(`No record with given id: ${jobId}`);
    }
    if (company === '' || position === '') { // status code 400
        res.status(StatusCodes.BAD_REQUEST).send('Company or position field cannot be empty.')
    }

    try {
        const result = await JobSchemaModel.findOneAndUpdate({ _id: jobId, createdBy: userId }, req.body, { new: true, runValidators: true });
        if (!result) {
            res.status(StatusCodes.BAD_GATEWAY).send("Job update not successful."); // status code 502
        }
        res.status(StatusCodes.OK).json({ // status code 200
            message: "Job updated successfully.",
            result
        });
    } catch (err) {
        res.status(StatusCodes.INTERNAL_SERVER_ERROR).send("Error updating job. " + err);
        console.log(err);
    }
}

const deleteJob = async(req, res) => {
    // nexted destructuring of "req.user" to get the "userId" from the authenticationToken() middleware and 
    // "req.params" to get the "id" which is given an alias of (rename to) "jobId". Each property (userId 
    // and id) is enclosed in curly braces {} to differentiate it from an alias.
    const { user: { userId }, params: { id: jobId } } = req;

    if (!objectId.isValid(jobId)) { // if jobId is not a valid mongoose id, status code 502
        res.status(StatusCodes.BAD_GATEWAY).send(`${jobId} is not a valid id.`);
    }
    try {
        const result = await JobSchemaModel.findOneAndDelete({ _id: jobId, createdBy: userId });
        if (!result) {
            res.status(StatusCodes.NOT_FOUND).send(`No job found with given id ${jobId}`); // status code 404
        }
        res.status(StatusCodes.OK).json({
            message: "Job deleted successfully.",
            result
        });
    } catch (err) {
        res.status(StatusCodes.INTERNAL_SERVER_ERROR).send("Error deleting job. " + err);
        console.log(err);
    }
}


module.exports = { getAllJobs, getJob, createJob, updateJob, deleteJob };